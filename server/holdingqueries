-- DROP TABLE IF EXISTS Reviews;
-- DROP TABLE IF EXISTS Bathrooms;
-- DROP TABLE IF EXISTS Users;

-- CREATE TABLE Users (
--   id SERIAL PRIMARY KEY,
--   username VARCHAR(25),
--   user_password VARCHAR(25),
--   karma FLOAT
-- );
            
-- create table Bathrooms (
--   id serial primary key,
--   latitude float,
--   longitude float,
--   bathroom_name varchar(30),
--   bathroom_address varchar(100),
--   ave_overall float,
--   ave_cleanliness float,
--   ave_crowdedness float,
--   top_category varchar(100),
--   poster_id integer
--   -- foreign key (poster_id) references Users(id)
-- );

-- create table Reviews (
--   id serial primary key,
--   overall int,
--   cleanliness integer,
--   crowdedness integer,
--   category varchar(100),
--   text_review varchar(255),
--   reviewer_id integer,
--   bathroom_id integer
--   -- FOREIGN KEY (reviewer_id) REFERENCES Users(id),
--   -- FOREIGN KEY (bathroom_id) REFERENCES Bathrooms(id)
-- );

-- INSERT INTO Bathrooms
--   (latitude, longitude, bathroom_name, bathroom_address, ave_overall, ave_cleanliness, ave_crowdedness, top_category)
-- VALUES (40.0315, -105.2342, 'fake-ass bathroom', '3160 Airport Rd, Boulder, CO 80301', 3, 3, 3, 'porta-potty');

-- INSERT INTO Bathrooms
--   (latitude, longitude, bathroom_name, bathroom_address, ave_overall, ave_cleanliness, ave_crowdedness, top_category)
-- VALUES (40.033, -105.24, 'id2 bathroom', '4879 Kings Ridge Blvd, Boulder, CO 80301', 3, 3, 3, 'golden throne');

-- SELECT id FROM bathrooms WHERE latitude=40.033 AND longitude=-105.24;

-- SELECT category
-- FROM Reviews
-- WHERE category IS NOT NULL
-- GROUP BY category
-- ORDER BY COUNT(*) DESC
-- LIMIT 1;